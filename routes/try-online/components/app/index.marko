import app from '../../../../routes/try-online/app';
import localStorageUtil from '../../../../util/localstorage';
import querystring from 'querystring';
import 'marked';
import 'whatwg-fetch';
import path from 'path';

class {
    onCreate() {
        this.state = {
            collapsed: {},
            loadingGist: false,
            activeTabFile: undefined,
            gistId: null
        };
    }

    onMount() {
        const DEFAULT_FOCUSED_FILE = '/language-guide';

        // The directory tree is serialized down from the server
        // as part of the state for this component. We want our
        // singleton application instance to have access to the
        // application state
        app.initialize(this.input);

        app.onStateChange((newState) => {
            this.input = newState;
        });

        var firstFocus = true;
        var baseUrl = window.location.pathname;
        var focusedFile;
        var gistId;

        function getUrlForFocusedFile() {
            return baseUrl + '?' + querystring.stringify({
                file: focusedFile,
                gist: gistId
            });
        }

        this.subscribeTo(app)
            .on('focus:change', (filePath) => {
                this.state.activeTabFile = filePath;

                if (focusedFile !== filePath) {
                    focusedFile = filePath;
                    history.pushState({ file: filePath }, '', getUrlForFocusedFile());
                    localStorageUtil.set('focusedFile', focusedFile);
                }
            });

        this.subscribeTo(window)
            .on('popstate', (event) => {
                var newState = event.state;
                if (newState && newState.file) {
                    focusedFile = newState.file;
                    app.focusFile(focusedFile);
                }
            });



        if (window.location.search) {
            var parsed = querystring.parse(window.location.search.substring(1));
            if (parsed.file) {
                focusedFile = parsed.file;
                if (focusedFile.charAt(0) !== '/') {
                    focusedFile = '/' + focusedFile;
                }
            }

            if (parsed.gist) {
                gistId = parsed.gist;
            }
        }

        var doFocusFile = () => {
            if (!focusedFile) {
                focusedFile = localStorageUtil.get('focusedFile');
            }

            if (focusedFile && !app.fileExists(focusedFile)) {
                focusedFile = null;
            }

            history.replaceState({ file: focusedFile }, '', getUrlForFocusedFile());

            app.focusFile(focusedFile || DEFAULT_FOCUSED_FILE);
        };

        if (gistId) {
            this.loadGist(gistId)
                .then(() => {
                    focusedFile = '/gist';
                    doFocusFile();
                })
                .catch(doFocusFile);
        } else {
            doFocusFile();
        }
    }

    loadGist(gistId) {
        this.state.loadingGist = true;
        this.state.gistId = gistId;

        var url = 'https://api.github.com/gists/' + gistId;

        return fetch(url)
            .then(response => response.json())
            .then(gist => {
                var files = gist.files;
                if (files) {
                    Object.keys(files).forEach((filePath) => {
                        var fileInfo = files[filePath];
                        var filename = fileInfo.filename;

                        var fileContent = fileInfo.content;
                        var targetPath = path.join('/gist', filename.replace(/\\/g, '/'));

                        app.saveFile(targetPath, fileContent);
                    });

                    app.saveFile('/gist/package.json', JSON.stringify({
                        description: 'Imported gist'
                    }));

                    app.loadProjects();

                    app.focusFile('/gist');
                }
                this.state.loadingGist = false;
            })
            .catch((err) => {
                this.state.loadingGist = false;
            });
    }

    handleCollapseToggle(paneName, event) {
        var isCollapsed = event.isCollapsed;
        this.state.collapsed = Object.assign({}, this.state.collapsed);
        this.state.collapsed[paneName] = isCollapsed;
    }

    handleTabClick(paneName, tabFile) {
        this.state.activeTabFile = tabFile.path;
        this.state.collapsed = Object.assign({}, this.state.collapsed);
        this.state.collapsed[paneName] = false;
    }
}

$ var panes = input.panes;
$ var visibleTabsByPane = input.visibleTabsByPane;
$ var rootDir = input.activeProject && input.activeProject.rootDir;

<macro renderPane(paneName, options)>
    $ var collapseDirection = options.collapseDirection;
    $ var collapsed = state.collapsed[paneName] != null ? state.collapsed[paneName] : options.collapsed === true;

    <div.pane-container key="pane-container-${paneName}" class=[paneName, collapsed && 'collapsed'] if(panes[paneName].length)>
        <pane files=panes[paneName]
            active-tab-file=state.activeTabFile
            on-tabClick('handleTabClick', paneName)/>

        <if(collapseDirection)>
            <collapse-icon direction=collapseDirection
                collapsed=collapsed
                key="pane-collapse-${paneName}"
                on-toggle('handleCollapseToggle', paneName)/>
        </if>
    </div>
</macro>

<div.try-online>
    <div.workspace>
        <div.tree-view-container>
            <project-nav(input)/>
            <tree-view root-dir=rootDir if(rootDir) />
        </div>
        <div.divider></div>
        <div.editors-container>
            <div.inputs-container>
                <div.divider></div>
                <renderPane('inputTop', {collapseDirection: 'up'})/>
                <div.divider if(panes['inputTop'].length && panes['inputBottom'].length)></div>
                <renderPane('inputBottom', {collapseDirection: 'down'})/>
                <div.divider></div>
            </div>
            <div.divider></div>
            <div.outputs-container>
                <div.divider></div>
                <renderPane('outputTop', {collapseDirection: 'up'})/>
                <div.divider if(panes['outputTop'].length && panes['outputBottom'].length)></div>
                <renderPane('outputBottom', {collapseDirection: 'down', collapsed: true})/>
                <div.divider></div>
            </div>
        </div>
    </div>
</div>
